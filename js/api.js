// api.js - API ÿ®ÿØÿπŸÖ ÿßŸÑŸÖÿµÿßÿØŸÇÿ© ÿßŸÑŸÖÿ≠ÿ≥ŸëŸÜ

const API = {
    // Helper function ŸÑŸÑÿ∑ŸÑÿ®ÿßÿ™ ŸÖÿπ ÿßŸÑŸÖÿµÿßÿØŸÇÿ©
    async request(endpoint, options = {}) {
        try {
            // ÿ•ÿ∂ÿßŸÅÿ© ÿ±ŸÖÿ≤ ÿßŸÑŸÖÿµÿßÿØŸÇÿ© ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖŸàÿ¨ŸàÿØÿßŸã
            const headers = {
                'Content-Type': 'application/json',
                ...options.headers
            };
            
            // ÿ•ÿ∂ÿßŸÅÿ© ÿ±ŸÖÿ≤ ÿßŸÑŸÖÿµÿßÿØŸÇÿ© ŸÖŸÜ AuthManager ÿ£Ÿà localStorage
            const token = (typeof AuthManager !== 'undefined' && AuthManager.token) || 
                         localStorage.getItem('authToken');
            
            if (token) {
                headers['Authorization'] = `Bearer ${token}`;
            } else {
                console.warn('ŸÑÿß ŸäŸàÿ¨ÿØ ÿ±ŸÖÿ≤ ŸÖÿµÿßÿØŸÇÿ© ŸÑŸÑÿ∑ŸÑÿ®:', endpoint);
            }
            
            console.log(`üì° ÿ∑ŸÑÿ® API: ${endpoint}`);
            
            const response = await fetch(`${Config.API_BASE_URL}${endpoint}`, {
                ...options,
                headers
            });

            if (!response.ok) {
                // ŸÖÿπÿßŸÑÿ¨ÿ© ÿ£ÿÆÿ∑ÿßÿ° ÿßŸÑŸÖÿµÿßÿØŸÇÿ©
                if (response.status === 401 || response.status === 403) {
                    console.error('‚ùå ÿÆÿ∑ÿ£ ŸÖÿµÿßÿØŸÇÿ©:', response.status);
                    if (typeof AuthManager !== 'undefined') {
                        AuthManager.handleUnauthorized();
                    } else {
                        // ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ AuthManager ŸÖÿ≠ŸÖŸÑÿßŸãÿå ÿßŸÜÿ™ŸÇŸÑ ŸÑÿµŸÅÿ≠ÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ
                        localStorage.removeItem('authToken');
                        localStorage.removeItem('currentUser');
                        window.location.href = '/login.html';
                    }
                }
                
                const error = await response.json().catch(() => ({ error: 'ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿÆÿßÿØŸÖ' }));
                throw new Error(error.error || `ÿÆÿ∑ÿ£: ${response.status}`);
            }

            const data = await response.json();
            console.log(`‚úÖ ÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© API ${endpoint}:`, data);
            return data;
            
        } catch (error) {
            console.error(`‚ùå ÿÆÿ∑ÿ£ API ${endpoint}:`, error);
            throw error;
        }
    },

    // API ŸÑŸÑÿ£ÿ∫ŸÜÿßŸÖ
    sheep: {
        async getAll() {
            return await API.request('/sheep');
        },

        async getOne(id) {
            return await API.request(`/sheep/${id}`);
        },

        async create(data) {
            return await API.request('/sheep', {
                method: 'POST',
                body: JSON.stringify(data)
            });
        },

        async update(id, data) {
            return await API.request(`/sheep/${id}`, {
                method: 'PUT',
                body: JSON.stringify(data)
            });
        },

        async delete(id) {
            return await API.request(`/sheep/${id}`, {
                method: 'DELETE'
            });
        }
    },

    // API ŸÑŸÑÿ≠ÿ∏ÿßÿ¶ÿ±
    pens: {
        async getAll() {
            return await API.request('/pens');
        },

        async getOne(id) {
            return await API.request(`/pens/${id}`);
        },

        async create(data) {
            return await API.request('/pens', {
                method: 'POST',
                body: JSON.stringify(data)
            });
        },

        async update(id, data) {
            return await API.request(`/pens/${id}`, {
                method: 'PUT',
                body: JSON.stringify(data)
            });
        },

        async delete(id) {
            return await API.request(`/pens/${id}`, {
                method: 'DELETE'
            });
        },

        async getFeedCalculation(id) {
            return await API.request(`/pens/${id}/feed-calculation`);
        }
    },

    // API ŸÑŸÑÿ£Ÿàÿ≤ÿßŸÜ
    weights: {
        async getHistory(sheepId) {
            return await API.request(`/sheep/${sheepId}/weights`);
        },

        async add(sheepId, data) {
            return await API.request(`/sheep/${sheepId}/weight`, {
                method: 'POST',
                body: JSON.stringify(data)
            });
        },

        async delete(id) {
            return await API.request(`/weights/${id}`, {
                method: 'DELETE'
            });
        }
    },

    // API ŸÑŸÑÿ£ÿ≠ÿØÿßÿ´
    events: {
        async getAll(params = {}) {
            const queryString = new URLSearchParams(params).toString();
            return await API.request(`/events${queryString ? '?' + queryString : ''}`);
        },

        async getHistory(sheepId) {
            return await API.request(`/sheep/${sheepId}/events`);
        },

        async add(sheepId, data) {
            return await API.request(`/sheep/${sheepId}/event`, {
                method: 'POST',
                body: JSON.stringify(data)
            });
        },

        async delete(id) {
            return await API.request(`/events/${id}`, {
                method: 'DELETE'
            });
        }
    },

    // API ŸÑŸÑÿ£ÿ≠ÿØÿßÿ´ ÿßŸÑŸÖÿ¨ÿØŸàŸÑÿ©
    scheduledEvents: {
        async getAll(params = {}) {
            const queryString = new URLSearchParams(params).toString();
            return await API.request(`/scheduled-events${queryString ? '?' + queryString : ''}`);
        },

        async create(data) {
            return await API.request('/scheduled-events', {
                method: 'POST',
                body: JSON.stringify(data)
            });
        },

        async update(id, data) {
            return await API.request(`/scheduled-events/${id}`, {
                method: 'PUT',
                body: JSON.stringify(data)
            });
        },

        async delete(id) {
            return await API.request(`/scheduled-events/${id}`, {
                method: 'DELETE'
            });
        },

        async complete(id) {
            return await API.request(`/scheduled-events/${id}/complete`, {
                method: 'POST'
            });
        }
    },

    // API ŸÑŸÑÿ≠ŸÖŸÑ
    pregnancies: {
        async getAll() {
            return await API.request('/pregnancies');
        },

        async getBySheep(sheepId) {
            return await API.request(`/sheep/${sheepId}/pregnancies`);
        },

        async create(data) {
            return await API.request('/pregnancies', {
                method: 'POST',
                body: JSON.stringify(data)
            });
        },

        async update(id, data) {
            return await API.request(`/pregnancies/${id}`, {
                method: 'PUT',
                body: JSON.stringify(data)
            });
        },

        async delete(id) {
            return await API.request(`/pregnancies/${id}`, {
                method: 'DELETE'
            });
        }
    },

    // API ŸÑŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™
    stats: {
        async get() {
            return await API.request('/stats');
        },

        async getProduction() {
            return await API.request('/production-stats');
        }
    },

    // API ŸÑŸÑŸÖÿπÿßŸÖŸÑÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ©
    transactions: {
        async getAll(params = {}) {
            const queryString = new URLSearchParams(params).toString();
            return await API.request(`/transactions${queryString ? '?' + queryString : ''}`);
        },

        async create(data) {
            return await API.request('/transactions', {
                method: 'POST',
                body: JSON.stringify(data)
            });
        },

        async update(id, data) {
            return await API.request(`/transactions/${id}`, {
                method: 'PUT',
                body: JSON.stringify(data)
            });
        },

        async delete(id) {
            return await API.request(`/transactions/${id}`, {
                method: 'DELETE'
            });
        },

        async getSummary(params = {}) {
            const queryString = new URLSearchParams(params).toString();
            return await API.request(`/transactions/summary${queryString ? '?' + queryString : ''}`);
        }
    },

    // API ŸÑÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿπŸÑŸÅ
    feedSettings: {
        async getAll() {
            return await API.request('/feed-settings');
        },

        async update(stage, data) {
            return await API.request(`/feed-settings/${stage}`, {
                method: 'PUT',
                body: JSON.stringify(data)
            });
        }
    },

    // API ŸÑÿ£ŸÜŸàÿßÿπ ÿßŸÑÿπŸÑŸÅ
    feedTypes: {
        async getAll() {
            return await API.request('/feed-types');
        },

        async create(data) {
            return await API.request('/feed-types', {
                method: 'POST',
                body: JSON.stringify(data)
            });
        }
    },

    // API ŸÑÿÆÿ∑ÿ∑ ÿßŸÑŸàÿ¨ÿ®ÿßÿ™
    mealPlans: {
        async getByPen(penId) {
            return await API.request(`/pens/${penId}/meal-plans`);
        },

        async save(penId, data) {
            return await API.request(`/pens/${penId}/meal-plans`, {
                method: 'POST',
                body: JSON.stringify(data)
            });
        },

        async getDetailedCalculation(penId) {
            return await API.request(`/pens/${penId}/detailed-feed-calculation`);
        }
    },

    // API ŸÑŸÖÿ≥ÿ≠ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
    data: {
        async clearAll() {
            return await API.request('/clear-all', {
                method: 'DELETE'
            });
        },

        async getInitialData() {
            return await API.request('/initial-data');
        }
    },

    // API ŸÑÿ™ÿµÿØŸäÿ± ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≤ÿ±ÿπÿ©
    farm: {
        async export() {
            const token = localStorage.getItem('authToken');
            return await fetch('/api/farm/export', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
        }
    },

    // API ŸÑÿ™ÿ∫ŸäŸäÿ± ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±
    auth: {
        async changePassword(currentPassword, newPassword) {
            return await API.request('/auth/change-password', {
                method: 'POST',
                body: JSON.stringify({
                    currentPassword,
                    newPassword
                })
            });
        },

        async me() {
            return await API.request('/auth/me');
        }
    }
};